{"ast":null,"code":"import { factory as PositionableFactory } from '../positionable'; // Util\n\nimport mixins from '../../util/mixins';\nexport default function applicationable(value, events = []) {\n  /* @vue/component */\n  return mixins(PositionableFactory(['absolute', 'fixed'])).extend({\n    name: 'applicationable',\n    props: {\n      app: Boolean\n    },\n    computed: {\n      applicationProperty() {\n        return value;\n      }\n    },\n    watch: {\n      // If previous value was app\n      // reset the provided prop\n      app(x, prev) {\n        prev ? this.removeApplication(true) : this.callUpdate();\n      },\n      applicationProperty(newVal, oldVal) {\n        this.$vuetify.application.unregister(this._uid, oldVal);\n      }\n    },\n    activated() {\n      this.callUpdate();\n    },\n    created() {\n      for (let i = 0, length = events.length; i < length; i++) {\n        this.$watch(events[i], this.callUpdate);\n      }\n      this.callUpdate();\n    },\n    mounted() {\n      this.callUpdate();\n    },\n    deactivated() {\n      this.removeApplication();\n    },\n    destroyed() {\n      this.removeApplication();\n    },\n    methods: {\n      callUpdate() {\n        if (!this.app) return;\n        this.$vuetify.application.register(this._uid, this.applicationProperty, this.updateApplication());\n      },\n      removeApplication(force = false) {\n        if (!force && !this.app) return;\n        this.$vuetify.application.unregister(this._uid, this.applicationProperty);\n      },\n      updateApplication: () => 0\n    }\n  });\n}","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}