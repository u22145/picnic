{"ast":null,"code":"// Extensions\nimport { Service } from '../service';\nexport class Breakpoint extends Service {\n  constructor(preset) {\n    super(); // Public\n\n    this.xs = false;\n    this.sm = false;\n    this.md = false;\n    this.lg = false;\n    this.xl = false;\n    this.xsOnly = false;\n    this.smOnly = false;\n    this.smAndDown = false;\n    this.smAndUp = false;\n    this.mdOnly = false;\n    this.mdAndDown = false;\n    this.mdAndUp = false;\n    this.lgOnly = false;\n    this.lgAndDown = false;\n    this.lgAndUp = false;\n    this.xlOnly = false; // Value is xs to match v2.x functionality\n\n    this.name = 'xs';\n    this.height = 0;\n    this.width = 0; // TODO: Add functionality to detect this dynamically in v3\n    // Value is true to match v2.x functionality\n\n    this.mobile = true;\n    this.resizeTimeout = 0;\n    const {\n      mobileBreakpoint,\n      scrollBarWidth,\n      thresholds\n    } = preset[Breakpoint.property];\n    this.mobileBreakpoint = mobileBreakpoint;\n    this.scrollBarWidth = scrollBarWidth;\n    this.thresholds = thresholds;\n  }\n  init() {\n    this.update();\n    /* istanbul ignore if */\n\n    if (typeof window === 'undefined') return;\n    window.addEventListener('resize', this.onResize.bind(this), {\n      passive: true\n    });\n  }\n  /* eslint-disable-next-line max-statements */\n\n  update(ssr = false) {\n    const height = ssr ? 0 : this.getClientHeight();\n    const width = ssr ? 0 : this.getClientWidth();\n    const xs = width < this.thresholds.xs;\n    const sm = width < this.thresholds.sm && !xs;\n    const md = width < this.thresholds.md - this.scrollBarWidth && !(sm || xs);\n    const lg = width < this.thresholds.lg - this.scrollBarWidth && !(md || sm || xs);\n    const xl = width >= this.thresholds.lg - this.scrollBarWidth;\n    this.height = height;\n    this.width = width;\n    this.xs = xs;\n    this.sm = sm;\n    this.md = md;\n    this.lg = lg;\n    this.xl = xl;\n    this.xsOnly = xs;\n    this.smOnly = sm;\n    this.smAndDown = (xs || sm) && !(md || lg || xl);\n    this.smAndUp = !xs && (sm || md || lg || xl);\n    this.mdOnly = md;\n    this.mdAndDown = (xs || sm || md) && !(lg || xl);\n    this.mdAndUp = !(xs || sm) && (md || lg || xl);\n    this.lgOnly = lg;\n    this.lgAndDown = (xs || sm || md || lg) && !xl;\n    this.lgAndUp = !(xs || sm || md) && (lg || xl);\n    this.xlOnly = xl;\n    switch (true) {\n      case xs:\n        this.name = 'xs';\n        break;\n      case sm:\n        this.name = 'sm';\n        break;\n      case md:\n        this.name = 'md';\n        break;\n      case lg:\n        this.name = 'lg';\n        break;\n      default:\n        this.name = 'xl';\n        break;\n    }\n    if (typeof this.mobileBreakpoint === 'number') {\n      this.mobile = width < parseInt(this.mobileBreakpoint, 10);\n      return;\n    }\n    const breakpoints = {\n      xs: 0,\n      sm: 1,\n      md: 2,\n      lg: 3,\n      xl: 4\n    };\n    const current = breakpoints[this.name];\n    const max = breakpoints[this.mobileBreakpoint];\n    this.mobile = current <= max;\n  }\n  onResize() {\n    clearTimeout(this.resizeTimeout); // Added debounce to match what\n    // v-resize used to do but was\n    // removed due to a memory leak\n    // https://github.com/vuetifyjs/vuetify/pull/2997\n\n    this.resizeTimeout = window.setTimeout(this.update.bind(this), 200);\n  } // Cross-browser support as described in:\n  // https://stackoverflow.com/questions/1248081\n\n  getClientWidth() {\n    /* istanbul ignore if */\n    if (typeof document === 'undefined') return 0; // SSR\n\n    return Math.max(document.documentElement.clientWidth, window.innerWidth || 0);\n  }\n  getClientHeight() {\n    /* istanbul ignore if */\n    if (typeof document === 'undefined') return 0; // SSR\n\n    return Math.max(document.documentElement.clientHeight, window.innerHeight || 0);\n  }\n}\nBreakpoint.property = 'breakpoint';","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}