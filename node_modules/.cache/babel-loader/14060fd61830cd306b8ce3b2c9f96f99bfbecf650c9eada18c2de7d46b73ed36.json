{"ast":null,"code":"import \"core-js/modules/es.array.push.js\";\n// Styles\nimport \"../../../src/components/VItemGroup/VItemGroup.sass\"; // Mixins\n\nimport Comparable from '../../mixins/comparable';\nimport Proxyable from '../../mixins/proxyable';\nimport Themeable from '../../mixins/themeable'; // Utilities\n\nimport mixins from '../../util/mixins';\nimport { consoleWarn } from '../../util/console';\nexport const BaseItemGroup = mixins(Comparable, Proxyable, Themeable).extend({\n  name: 'base-item-group',\n  props: {\n    activeClass: {\n      type: String,\n      default: 'v-item--active'\n    },\n    mandatory: Boolean,\n    max: {\n      type: [Number, String],\n      default: null\n    },\n    multiple: Boolean,\n    tag: {\n      type: String,\n      default: 'div'\n    }\n  },\n  data() {\n    return {\n      // As long as a value is defined, show it\n      // Otherwise, check if multiple\n      // to determine which default to provide\n      internalLazyValue: this.value !== undefined ? this.value : this.multiple ? [] : undefined,\n      items: []\n    };\n  },\n  computed: {\n    classes() {\n      return {\n        'v-item-group': true,\n        ...this.themeClasses\n      };\n    },\n    selectedIndex() {\n      return this.selectedItem && this.items.indexOf(this.selectedItem) || -1;\n    },\n    selectedItem() {\n      if (this.multiple) return undefined;\n      return this.selectedItems[0];\n    },\n    selectedItems() {\n      return this.items.filter((item, index) => {\n        return this.toggleMethod(this.getValue(item, index));\n      });\n    },\n    selectedValues() {\n      if (this.internalValue == null) return [];\n      return Array.isArray(this.internalValue) ? this.internalValue : [this.internalValue];\n    },\n    toggleMethod() {\n      if (!this.multiple) {\n        return v => this.valueComparator(this.internalValue, v);\n      }\n      const internalValue = this.internalValue;\n      if (Array.isArray(internalValue)) {\n        return v => internalValue.some(intern => this.valueComparator(intern, v));\n      }\n      return () => false;\n    }\n  },\n  watch: {\n    internalValue: 'updateItemsState',\n    items: 'updateItemsState'\n  },\n  created() {\n    if (this.multiple && !Array.isArray(this.internalValue)) {\n      consoleWarn('Model must be bound to an array if the multiple property is true.', this);\n    }\n  },\n  methods: {\n    genData() {\n      return {\n        class: this.classes\n      };\n    },\n    getValue(item, i) {\n      return item.value === undefined ? i : item.value;\n    },\n    onClick(item) {\n      this.updateInternalValue(this.getValue(item, this.items.indexOf(item)));\n    },\n    register(item) {\n      const index = this.items.push(item) - 1;\n      item.$on('change', () => this.onClick(item)); // If no value provided and mandatory,\n      // assign first registered item\n\n      if (this.mandatory && !this.selectedValues.length) {\n        this.updateMandatory();\n      }\n      this.updateItem(item, index);\n    },\n    unregister(item) {\n      if (this._isDestroyed) return;\n      const index = this.items.indexOf(item);\n      const value = this.getValue(item, index);\n      this.items.splice(index, 1);\n      const valueIndex = this.selectedValues.indexOf(value); // Items is not selected, do nothing\n\n      if (valueIndex < 0) return; // If not mandatory, use regular update process\n\n      if (!this.mandatory) {\n        return this.updateInternalValue(value);\n      } // Remove the value\n\n      if (this.multiple && Array.isArray(this.internalValue)) {\n        this.internalValue = this.internalValue.filter(v => v !== value);\n      } else {\n        this.internalValue = undefined;\n      } // If mandatory and we have no selection\n      // add the last item as value\n\n      /* istanbul ignore else */\n\n      if (!this.selectedItems.length) {\n        this.updateMandatory(true);\n      }\n    },\n    updateItem(item, index) {\n      const value = this.getValue(item, index);\n      item.isActive = this.toggleMethod(value);\n    },\n    // https://github.com/vuetifyjs/vuetify/issues/5352\n    updateItemsState() {\n      this.$nextTick(() => {\n        if (this.mandatory && !this.selectedItems.length) {\n          return this.updateMandatory();\n        } // TODO: Make this smarter so it\n        // doesn't have to iterate every\n        // child in an update\n\n        this.items.forEach(this.updateItem);\n      });\n    },\n    updateInternalValue(value) {\n      this.multiple ? this.updateMultiple(value) : this.updateSingle(value);\n    },\n    updateMandatory(last) {\n      if (!this.items.length) return;\n      const items = this.items.slice();\n      if (last) items.reverse();\n      const item = items.find(item => !item.disabled); // If no tabs are available\n      // aborts mandatory value\n\n      if (!item) return;\n      const index = this.items.indexOf(item);\n      this.updateInternalValue(this.getValue(item, index));\n    },\n    updateMultiple(value) {\n      const defaultValue = Array.isArray(this.internalValue) ? this.internalValue : [];\n      const internalValue = defaultValue.slice();\n      const index = internalValue.findIndex(val => this.valueComparator(val, value));\n      if (this.mandatory &&\n      // Item already exists\n      index > -1 &&\n      // value would be reduced below min\n      internalValue.length - 1 < 1) return;\n      if (\n      // Max is set\n      this.max != null &&\n      // Item doesn't exist\n      index < 0 &&\n      // value would be increased above max\n      internalValue.length + 1 > this.max) return;\n      index > -1 ? internalValue.splice(index, 1) : internalValue.push(value);\n      this.internalValue = internalValue;\n    },\n    updateSingle(value) {\n      const isSame = this.valueComparator(this.internalValue, value);\n      if (this.mandatory && isSame) return;\n      this.internalValue = isSame ? undefined : value;\n    }\n  },\n  render(h) {\n    return h(this.tag, this.genData(), this.$slots.default);\n  }\n});\nexport default BaseItemGroup.extend({\n  name: 'v-item-group',\n  provide() {\n    return {\n      itemGroup: this\n    };\n  }\n});","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}