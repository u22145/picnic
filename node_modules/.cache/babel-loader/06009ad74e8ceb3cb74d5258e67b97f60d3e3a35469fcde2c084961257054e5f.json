{"ast":null,"code":"import Vue from 'vue'; // Directives\n\nimport Ripple from '../../directives/ripple'; // Utilities\n\nimport { getObjectValueByPath } from '../../util/helpers';\nexport default Vue.extend({\n  name: 'routable',\n  directives: {\n    Ripple\n  },\n  props: {\n    activeClass: String,\n    append: Boolean,\n    disabled: Boolean,\n    exact: {\n      type: Boolean,\n      default: undefined\n    },\n    exactPath: Boolean,\n    exactActiveClass: String,\n    link: Boolean,\n    href: [String, Object],\n    to: [String, Object],\n    nuxt: Boolean,\n    replace: Boolean,\n    ripple: {\n      type: [Boolean, Object],\n      default: null\n    },\n    tag: String,\n    target: String\n  },\n  data: () => ({\n    isActive: false,\n    proxyClass: ''\n  }),\n  computed: {\n    classes() {\n      const classes = {};\n      if (this.to) return classes;\n      if (this.activeClass) classes[this.activeClass] = this.isActive;\n      if (this.proxyClass) classes[this.proxyClass] = this.isActive;\n      return classes;\n    },\n    computedRipple() {\n      var _a;\n      return (_a = this.ripple) !== null && _a !== void 0 ? _a : !this.disabled && this.isClickable;\n    },\n    isClickable() {\n      if (this.disabled) return false;\n      return Boolean(this.isLink || this.$listeners.click || this.$listeners['!click'] || this.$attrs.tabindex);\n    },\n    isLink() {\n      return this.to || this.href || this.link;\n    },\n    styles: () => ({})\n  },\n  watch: {\n    $route: 'onRouteChange'\n  },\n  mounted() {\n    this.onRouteChange();\n  },\n  methods: {\n    generateRouteLink() {\n      let exact = this.exact;\n      let tag;\n      const data = {\n        attrs: {\n          tabindex: 'tabindex' in this.$attrs ? this.$attrs.tabindex : undefined\n        },\n        class: this.classes,\n        style: this.styles,\n        props: {},\n        directives: [{\n          name: 'ripple',\n          value: this.computedRipple\n        }],\n        [this.to ? 'nativeOn' : 'on']: {\n          ...this.$listeners,\n          ...('click' in this ? {\n            click: this.click\n          } : undefined) // #14447\n        },\n\n        ref: 'link'\n      };\n      if (typeof this.exact === 'undefined') {\n        exact = this.to === '/' || this.to === Object(this.to) && this.to.path === '/';\n      }\n      if (this.to) {\n        // Add a special activeClass hook\n        // for component level styles\n        let activeClass = this.activeClass;\n        let exactActiveClass = this.exactActiveClass || activeClass;\n        if (this.proxyClass) {\n          activeClass = `${activeClass} ${this.proxyClass}`.trim();\n          exactActiveClass = `${exactActiveClass} ${this.proxyClass}`.trim();\n        }\n        tag = this.nuxt ? 'nuxt-link' : 'router-link';\n        Object.assign(data.props, {\n          to: this.to,\n          exact,\n          exactPath: this.exactPath,\n          activeClass,\n          exactActiveClass,\n          append: this.append,\n          replace: this.replace\n        });\n      } else {\n        tag = this.href && 'a' || this.tag || 'div';\n        if (tag === 'a' && this.href) data.attrs.href = this.href;\n      }\n      if (this.target) data.attrs.target = this.target;\n      return {\n        tag,\n        data\n      };\n    },\n    onRouteChange() {\n      if (!this.to || !this.$refs.link || !this.$route) return;\n      const activeClass = `${this.activeClass || ''} ${this.proxyClass || ''}`.trim();\n      const exactActiveClass = `${this.exactActiveClass || ''} ${this.proxyClass || ''}`.trim() || activeClass;\n      const path = '_vnode.data.class.' + (this.exact ? exactActiveClass : activeClass);\n      this.$nextTick(() => {\n        /* istanbul ignore else */\n        if (!getObjectValueByPath(this.$refs.link, path) === this.isActive) {\n          this.toggle();\n        }\n      });\n    },\n    toggle() {\n      this.isActive = !this.isActive;\n    }\n  }\n});","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}