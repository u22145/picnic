{"ast":null,"code":"import \"core-js/modules/es.array.push.js\";\n// Styles\nimport \"../../../src/components/VImg/VImg.sass\"; // Directives\n\nimport intersect from '../../directives/intersect'; // Components\n\nimport VResponsive from '../VResponsive'; // Mixins\n\nimport Themeable from '../../mixins/themeable'; // Utils\n\nimport mixins from '../../util/mixins';\nimport mergeData from '../../util/mergeData';\nimport { consoleWarn } from '../../util/console';\nimport { getSlot } from '../../util/helpers';\nconst hasIntersect = typeof window !== 'undefined' && 'IntersectionObserver' in window;\n/* @vue/component */\n\nexport default mixins(VResponsive, Themeable).extend({\n  name: 'v-img',\n  directives: {\n    intersect\n  },\n  props: {\n    alt: String,\n    contain: Boolean,\n    eager: Boolean,\n    gradient: String,\n    lazySrc: String,\n    options: {\n      type: Object,\n      // For more information on types, navigate to:\n      // https://developer.mozilla.org/en-US/docs/Web/API/Intersection_Observer_API\n      default: () => ({\n        root: undefined,\n        rootMargin: undefined,\n        threshold: undefined\n      })\n    },\n    position: {\n      type: String,\n      default: 'center center'\n    },\n    sizes: String,\n    src: {\n      type: [String, Object],\n      default: ''\n    },\n    srcset: String,\n    transition: {\n      type: [Boolean, String],\n      default: 'fade-transition'\n    }\n  },\n  data() {\n    return {\n      currentSrc: '',\n      image: null,\n      isLoading: true,\n      calculatedAspectRatio: undefined,\n      naturalWidth: undefined,\n      hasError: false\n    };\n  },\n  computed: {\n    computedAspectRatio() {\n      return Number(this.normalisedSrc.aspect || this.calculatedAspectRatio);\n    },\n    normalisedSrc() {\n      return this.src && typeof this.src === 'object' ? {\n        src: this.src.src,\n        srcset: this.srcset || this.src.srcset,\n        lazySrc: this.lazySrc || this.src.lazySrc,\n        aspect: Number(this.aspectRatio || this.src.aspect)\n      } : {\n        src: this.src,\n        srcset: this.srcset,\n        lazySrc: this.lazySrc,\n        aspect: Number(this.aspectRatio || 0)\n      };\n    },\n    __cachedImage() {\n      if (!(this.normalisedSrc.src || this.normalisedSrc.lazySrc || this.gradient)) return [];\n      const backgroundImage = [];\n      const src = this.isLoading ? this.normalisedSrc.lazySrc : this.currentSrc;\n      if (this.gradient) backgroundImage.push(`linear-gradient(${this.gradient})`);\n      if (src) backgroundImage.push(`url(\"${src}\")`);\n      const image = this.$createElement('div', {\n        staticClass: 'v-image__image',\n        class: {\n          'v-image__image--preload': this.isLoading,\n          'v-image__image--contain': this.contain,\n          'v-image__image--cover': !this.contain\n        },\n        style: {\n          backgroundImage: backgroundImage.join(', '),\n          backgroundPosition: this.position\n        },\n        key: +this.isLoading\n      });\n      /* istanbul ignore if */\n\n      if (!this.transition) return image;\n      return this.$createElement('transition', {\n        attrs: {\n          name: this.transition,\n          mode: 'in-out'\n        }\n      }, [image]);\n    }\n  },\n  watch: {\n    src() {\n      // Force re-init when src changes\n      if (!this.isLoading) this.init(undefined, undefined, true);else this.loadImage();\n    },\n    '$vuetify.breakpoint.width': 'getSrc'\n  },\n  mounted() {\n    this.init();\n  },\n  methods: {\n    init(entries, observer, isIntersecting) {\n      // If the current browser supports the intersection\n      // observer api, the image is not observable, and\n      // the eager prop isn't being used, do not load\n      if (hasIntersect && !isIntersecting && !this.eager) return;\n      if (this.normalisedSrc.lazySrc) {\n        const lazyImg = new Image();\n        lazyImg.src = this.normalisedSrc.lazySrc;\n        this.pollForSize(lazyImg, null);\n      }\n      /* istanbul ignore else */\n\n      if (this.normalisedSrc.src) this.loadImage();\n    },\n    onLoad() {\n      this.getSrc();\n      this.isLoading = false;\n      this.$emit('load', this.src);\n      if (this.image && (this.normalisedSrc.src.endsWith('.svg') || this.normalisedSrc.src.startsWith('data:image/svg+xml'))) {\n        if (this.image.naturalHeight && this.image.naturalWidth) {\n          this.naturalWidth = this.image.naturalWidth;\n          this.calculatedAspectRatio = this.image.naturalWidth / this.image.naturalHeight;\n        } else {\n          this.calculatedAspectRatio = 1;\n        }\n      }\n    },\n    onError() {\n      this.hasError = true;\n      this.$emit('error', this.src);\n    },\n    getSrc() {\n      /* istanbul ignore else */\n      if (this.image) this.currentSrc = this.image.currentSrc || this.image.src;\n    },\n    loadImage() {\n      const image = new Image();\n      this.image = image;\n      image.onload = () => {\n        /* istanbul ignore if */\n        if (image.decode) {\n          image.decode().catch(err => {\n            consoleWarn(`Failed to decode image, trying to render anyway\\n\\n` + `src: ${this.normalisedSrc.src}` + (err.message ? `\\nOriginal error: ${err.message}` : ''), this);\n          }).then(this.onLoad);\n        } else {\n          this.onLoad();\n        }\n      };\n      image.onerror = this.onError;\n      this.hasError = false;\n      this.sizes && (image.sizes = this.sizes);\n      this.normalisedSrc.srcset && (image.srcset = this.normalisedSrc.srcset);\n      image.src = this.normalisedSrc.src;\n      this.$emit('loadstart', this.normalisedSrc.src);\n      this.aspectRatio || this.pollForSize(image);\n      this.getSrc();\n    },\n    pollForSize(img, timeout = 100) {\n      const poll = () => {\n        const {\n          naturalHeight,\n          naturalWidth\n        } = img;\n        if (naturalHeight || naturalWidth) {\n          this.naturalWidth = naturalWidth;\n          this.calculatedAspectRatio = naturalWidth / naturalHeight;\n        } else if (!img.complete && this.isLoading && !this.hasError && timeout != null) {\n          setTimeout(poll, timeout);\n        }\n      };\n      poll();\n    },\n    genContent() {\n      const content = VResponsive.options.methods.genContent.call(this);\n      if (this.naturalWidth) {\n        this._b(content.data, 'div', {\n          style: {\n            width: `${this.naturalWidth}px`\n          }\n        });\n      }\n      return content;\n    },\n    __genPlaceholder() {\n      const slot = getSlot(this, 'placeholder');\n      if (slot) {\n        const placeholder = this.isLoading ? [this.$createElement('div', {\n          staticClass: 'v-image__placeholder'\n        }, slot)] : [];\n        if (!this.transition) return placeholder[0];\n        return this.$createElement('transition', {\n          props: {\n            appear: true,\n            name: this.transition\n          }\n        }, placeholder);\n      }\n    }\n  },\n  render(h) {\n    const node = VResponsive.options.render.call(this, h);\n    const data = mergeData(node.data, {\n      staticClass: 'v-image',\n      attrs: {\n        'aria-label': this.alt,\n        role: this.alt ? 'img' : undefined\n      },\n      class: this.themeClasses,\n      // Only load intersect directive if it\n      // will work in the current browser.\n      directives: hasIntersect ? [{\n        name: 'intersect',\n        modifiers: {\n          once: true\n        },\n        value: {\n          handler: this.init,\n          options: this.options\n        }\n      }] : undefined\n    });\n    node.children = [this.__cachedSizer, this.__cachedImage, this.__genPlaceholder(), this.genContent()];\n    return h(node.tag, data, node.children);\n  }\n});","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}