{"ast":null,"code":"import \"core-js/modules/es.array.push.js\";\n// Components\nimport VInput from '../../components/VInput'; // Mixins\n\nimport Rippleable from '../rippleable';\nimport Comparable from '../comparable'; // Utilities\n\nimport mixins from '../../util/mixins';\nexport function prevent(e) {\n  e.preventDefault();\n}\n/* @vue/component */\n\nexport default mixins(VInput, Rippleable, Comparable).extend({\n  name: 'selectable',\n  model: {\n    prop: 'inputValue',\n    event: 'change'\n  },\n  props: {\n    id: String,\n    inputValue: null,\n    falseValue: null,\n    trueValue: null,\n    multiple: {\n      type: Boolean,\n      default: null\n    },\n    label: String\n  },\n  data() {\n    return {\n      hasColor: this.inputValue,\n      lazyValue: this.inputValue\n    };\n  },\n  computed: {\n    computedColor() {\n      if (!this.isActive) return undefined;\n      if (this.color) return this.color;\n      if (this.isDark && !this.appIsDark) return 'white';\n      return 'primary';\n    },\n    isMultiple() {\n      return this.multiple === true || this.multiple === null && Array.isArray(this.internalValue);\n    },\n    isActive() {\n      const value = this.value;\n      const input = this.internalValue;\n      if (this.isMultiple) {\n        if (!Array.isArray(input)) return false;\n        return input.some(item => this.valueComparator(item, value));\n      }\n      if (this.trueValue === undefined || this.falseValue === undefined) {\n        return value ? this.valueComparator(value, input) : Boolean(input);\n      }\n      return this.valueComparator(input, this.trueValue);\n    },\n    isDirty() {\n      return this.isActive;\n    },\n    rippleState() {\n      return !this.isDisabled && !this.validationState ? undefined : this.validationState;\n    }\n  },\n  watch: {\n    inputValue(val) {\n      this.lazyValue = val;\n      this.hasColor = val;\n    }\n  },\n  methods: {\n    genLabel() {\n      const label = VInput.options.methods.genLabel.call(this);\n      if (!label) return label;\n      label.data.on = {\n        // Label shouldn't cause the input to focus\n        click: prevent\n      };\n      return label;\n    },\n    genInput(type, attrs) {\n      return this.$createElement('input', {\n        attrs: Object.assign({\n          'aria-checked': this.isActive.toString(),\n          disabled: this.isDisabled,\n          id: this.computedId,\n          role: type,\n          type\n        }, attrs),\n        domProps: {\n          value: this.value,\n          checked: this.isActive\n        },\n        on: {\n          blur: this.onBlur,\n          change: this.onChange,\n          focus: this.onFocus,\n          keydown: this.onKeydown,\n          click: prevent\n        },\n        ref: 'input'\n      });\n    },\n    onClick(e) {\n      this.onChange();\n      this.$emit('click', e);\n    },\n    onChange() {\n      if (!this.isInteractive) return;\n      const value = this.value;\n      let input = this.internalValue;\n      if (this.isMultiple) {\n        if (!Array.isArray(input)) {\n          input = [];\n        }\n        const length = input.length;\n        input = input.filter(item => !this.valueComparator(item, value));\n        if (input.length === length) {\n          input.push(value);\n        }\n      } else if (this.trueValue !== undefined && this.falseValue !== undefined) {\n        input = this.valueComparator(input, this.trueValue) ? this.falseValue : this.trueValue;\n      } else if (value) {\n        input = this.valueComparator(input, value) ? null : value;\n      } else {\n        input = !input;\n      }\n      this.validate(true, input);\n      this.internalValue = input;\n      this.hasColor = input;\n    },\n    onFocus(e) {\n      this.isFocused = true;\n      this.$emit('focus', e);\n    },\n    onBlur(e) {\n      this.isFocused = false;\n      this.$emit('blur', e);\n    },\n    /** @abstract */\n    onKeydown(e) {}\n  }\n});","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}